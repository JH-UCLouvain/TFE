#!/bin/python3
# Authors : Emilie Deprez, Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI

import sys
sys.path.insert(1, '/course/common/student/')
from ipmininet_exercices import IPMininet_Exercice
ex = IPMininet_Exercice(6)

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)

        self.addLink(h1, h2, intfName1=ex.generate_intf_name("h1-h2"), intfName2=ex.generate_intf_name("h2-h1"))

        mask = 64
        subnet = ex.generate_subnet_addr(mask)
        ex.generate_intf_addr("h1-h2", subnet, mask)
        ex.generate_intf_addr("h2-h1", subnet, mask)

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    print(f"h1 must be configured with the address : " + ex.intf_addr["h1-h2"] + "/64")
    print(f"h2 must be configured with the address : " + ex.intf_addr["h2-h1"] + "/64")

    net.start()

    IPCLI(net)

    ex.ping_test("h1", "h2-h1", net)
    ex.ping_test("h2", "h1-h2", net)
    ex.send_feedback()

except Exception as e:
    ex.send_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()