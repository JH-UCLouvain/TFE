#!/bin/python3
# Authors : Emilie Deprez, Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig

import sys
sys.path.insert(1, '/course/common/student/')
from ipmininet_exercices import IPMininet_Exercice
ex = IPMininet_Exercice(6)

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)
        h3 = self.addHost("h3", defaultRoute=None)
        r1 = self.addRouter("r1", config=RouterConfig)
        r2 = self.addRouter("r2", config=RouterConfig)

        self.addLink(h1, r1, intfName1=ex.generate_intf_name("h1-r1"), intfName2=ex.generate_intf_name("r1-h1"))
        self.addLink(r1, r2, intfName1=ex.generate_intf_name("r1-r2"), intfName2=ex.generate_intf_name("r2-r1"))
        self.addLink(h2, r2, intfName1=ex.generate_intf_name("h2-r2"), intfName2=ex.generate_intf_name("r2-h2"))
        self.addLink(h3, r2, intfName1=ex.generate_intf_name("h3-r2"), intfName2=ex.generate_intf_name("r2-h3"))

        mask = 64
        subnet = ex.generate_subnet_addr(ex.ip_version, mask)
        ex.generate_intf_addr("h1-r1", subnet, mask)
        ex.generate_intf_addr("r1-h1", subnet, mask)

        mask = 64
        subnet = ex.generate_subnet_addr(ex.ip_version, mask)
        ex.generate_intf_addr("r1-r2", subnet, mask)
        ex.generate_intf_addr("r2-r1", subnet, mask)

        mask = 64
        subnet = ex.generate_subnet_addr(ex.ip_version, mask)
        ex.generate_intf_addr("h2-r2", subnet, mask)
        ex.generate_intf_addr("r2-h2", subnet, mask)

        mask = 64
        subnet = ex.generate_subnet_addr(ex.ip_version, mask)
        ex.generate_intf_addr("h3-r2", subnet, mask)
        ex.generate_intf_addr("r2-h3", subnet, mask)

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    for intf, addr in ex.intf_addr.items():
        print(f"The IP address of {intf} must be configured as : {addr}/64")

    net.start()

    IPCLI(net)

    ex.ping_test("h1", "h2-r2", net)
    ex.ping_test("h1", "h3-r2", net)
    ex.ping_test("h2", "h1-r1", net)
    ex.ping_test("h2", "h3-r2", net)
    ex.ping_test("h3", "h1-r1", net)
    ex.ping_test("h3", "h2-r2", net)
    ex.send_feedback()

except Exception as e:
    ex.send_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()