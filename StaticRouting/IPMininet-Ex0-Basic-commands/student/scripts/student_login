#!/bin/python3
# Authors : Emilie Deprez, Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig

import random

def store_feedback(grade, result, feedback):
    STORE = True
    if STORE:
        with open("tmp/student/feedback.txt", "w") as f:
            f.write(str(grade) + "\n")
            f.write(result + "\n")
            f.write(feedback)
    else:
        print(f"Grade : {grade}")
        print(f"Result : {result}")
        print(f"Feedback : {feedback}")

interface_addr = dict()

def generate_IP_addr(interface, version, prefix):
    while True:
        addr = ""
        if version == "v4":
            if prefix != "" and prefix[-1] != ".": prefix += "."
            n_rand = 4 - (len(prefix.split(".")) - 1)
            addr = prefix + ".".join(("%s" % random.randint(0, 255) for _ in range(n_rand)))
            addr = addr.rstrip(".")
        elif version == "v6":
            if prefix != "" and prefix[-1] != ":": prefix += ":"
            n_rand = 8 - (len(prefix.split(":")) - 1)
            addr = prefix + ":".join(("%s" % "".join(("%s" % random.choice(("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f")) for _ in range(4))) for _ in range(n_rand)))
            addr = addr.rstrip(":")
        else: raise ValueError("IP version must be \"v4\" or \"v6\"")
        if addr not in interface_addr.values():
            interface_addr[interface] = addr
            return addr

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)
        h3 = self.addHost("h3", defaultRoute=None)
        r1 = self.addRouter("r1", config=RouterConfig)
        r2 = self.addRouter("r2", config=RouterConfig)
        r3 = self.addRouter("r3", config=RouterConfig)
        r4 = self.addRouter("r4", config=RouterConfig)

        lh1r1 = self.addLink(h1, r1)
        lh1r1[h1].addParams(ip = generate_IP_addr("h1-r1", "v6", "2001:db8:1341:1:") + "/64")
        lh1r1[r1].addParams(ip = generate_IP_addr("r1-h1", "v6", "2001:db8:1341:1:") + "/64")

        lr1r2 = self.addLink(r1, r2)
        lr1r2[r1].addParams(ip = generate_IP_addr("r1-r2", "v6", "2001:db8:1341:2:") + "/64")
        lr1r2[r2].addParams(ip = generate_IP_addr("r2-r1", "v6", "2001:db8:1341:2:") + "/64")

        lr1r3 = self.addLink(r1, r3)
        lr1r3[r1].addParams(ip = generate_IP_addr("r1-r3", "v6", "2001:db8:1341:3:") + "/64")
        lr1r3[r3].addParams(ip = generate_IP_addr("r3-r1", "v6", "2001:db8:1341:3:") + "/64")

        lr2r4 = self.addLink(r2, r4)
        lr2r4[r2].addParams(ip = generate_IP_addr("r2-r4", "v6", "2001:db8:1341:4:") + "/64")
        lr2r4[r4].addParams(ip = generate_IP_addr("r4-r2", "v6", "2001:db8:1341:4:") + "/64")

        lr3r4 = self.addLink(r3, r4)
        lr3r4[r3].addParams(ip = generate_IP_addr("r3-r4", "v6", "2001:db8:1341:5:") + "/64")
        lr3r4[r4].addParams(ip = generate_IP_addr("r4-r3", "v6", "2001:db8:1341:5:") + "/64")

        lh2r2 = self.addLink(r2, h2)
        lh2r2[h2].addParams(ip = generate_IP_addr("h2-r2", "v6", "2001:db8:1341:6:") + "/64")
        lh2r2[r2].addParams(ip = generate_IP_addr("r2-h2", "v6", "2001:db8:1341:6:") + "/64")

        lh3r3 = self.addLink(r3, h3)
        lh3r3[h3].addParams(ip = generate_IP_addr("h3-r3", "v6", "2001:db8:1341:7:") + "/64")
        lh3r3[r3].addParams(ip = generate_IP_addr("r3-h3", "v6", "2001:db8:1341:7:") + "/64")

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()
    net["h1"].cmd("ip -6 route add default via " + interface_addr["r1-h1"])
    net["h2"].cmd("ip -6 route add default via " + interface_addr["r2-h2"])
    net["h3"].cmd("ip -6 route add default via " + interface_addr["r3-h3"])
    net["r1"].cmd("ip -6 route add default via " + interface_addr["r2-r1"])
    net["r2"].cmd("ip -6 route add default via " + interface_addr["r4-r2"])
    net["r3"].cmd("ip -6 route add default via " + interface_addr["r1-r3"])
    net["r4"].cmd("ip -6 route add default via " + interface_addr["r3-r4"])
    net["r1"].cmd("ip -6 route add " + interface_addr["h3-r3"] + "/64 via " + interface_addr["r3-r1"])
    net["r2"].cmd("ip -6 route add " + interface_addr["h1-r1"] + "/64 via " + interface_addr["r1-r2"])

    IPCLI(net)

    store_feedback(100, "success", "Success")

except Exception as e:
    store_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()