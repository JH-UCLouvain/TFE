#!/bin/python3
# Author : Jeremy Holodiline

from inginious import feedback, ssh_student
from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig, STATIC
import random
import jc

addresses = dict()

def generateIPaddr(interface, version):
    while True:
        if version == "v4":
            addr = "192.168." + ".".join(("%s" % random.randint(0, 255) for _ in range(2)))
        elif version == "v6":
            addr = "2001:db8:1234:1341:" + ":".join(("%s" % "".join(("%s" % random.choice(("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f")) for _ in range(4))) for _ in range(4)))
        else:
            raise ValueError("IP version must be \"v4\" or \"v6\"")
        if addr not in addresses.values():
            addresses[interface] = addr
            return addr

def testPing(src, dst, net):
    try:
        resp = jc.parse('ping', net[src].cmd(f"ping -6 -c 1 -W 1 {dst}"))
        if resp["packet_loss_percent"] == 0.0 and len(resp["responses"]) > 0 and resp["responses"][0]["response_ip"] == dst:
            return (100/6, f"Ping {src}-{dst} success")
        else:
            return (0, f"Ping {src}-{dst} failed : cannot reach {dst} from {src}")
    except Exception as e: return (0, f"Ping {src}-{dst} failed : {e}")

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)
        h3 = self.addHost("h3", defaultRoute=None)
        r1 = self.addRouter("r1", config=RouterConfig)

        self.addLink(h1, r1)
        self.addLink(h2, r1)
        self.addLink(h3, r1)

        r1.addDaemon(STATIC, static_routes=[])
        
        generateIPaddr("h1r1", "v6")
        generateIPaddr("r1h1", "v6")
        generateIPaddr("h2r1", "v6")
        generateIPaddr("r1h2", "v6")
        generateIPaddr("h3r1", "v6")
        generateIPaddr("r1h3", "v6")

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()

    IPCLI(net)
    ssh_student.ssh_student()
    
    for interface, address in addresses.items():
        print(f"The IP address of {interface} must be {address}/64")

    grade = 0
    message = ""

    ping1 = testPing("h1", addresses["h2r1"], net)
    grade += ping1[0]
    message += ping1[1] + "\n"

    ping2 = testPing("h2", addresses["h1r1"], net)
    grade += ping2[0]
    message += ping2[1] + "\n"
    
    ping3 = testPing("h2", addresses["h3r1"], net)
    grade += ping3[0]
    message += ping3[1] + "\n"
    
    ping4 = testPing("h3", addresses["h2r1"], net)
    grade += ping4[0]
    message += ping4[1] + "\n"

    ping5 = testPing("h1", addresses["h3r1"], net)
    grade += ping5[0]
    message += ping5[1] + "\n"
    
    ping6 = testPing("h3", addresses["h1r1"], net)
    grade += ping6[0]
    message += ping6[1] + "\n"

    feedback.set_grade(grade)
    feedback.set_global_feedback(message)
    if grade == 100:
        feedback.set_global_result("success")
    else:
        feedback.set_global_result("failed")
    
except Exception as e:
    feedback.set_grade(0)
    feedback.set_global_feedback(f"{e}")
    feedback.set_global_result("failed")

finally:
    net.stop()