#!/bin/python3
# Author : Jeremy Holodiline

from inginious import feedback, ssh_student
from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig, STATIC
import jc

def testPing(src, dst, net):
    try:
        resp = jc.parse('ping', net[src].cmd(f"ping -6 -c 1 -W 1 {dst}"))
        if resp["packet_loss_percent"] == 0.0 and len(resp["responses"]) > 0 and resp["responses"][0]["response_ip"] == dst:
            return (100/12, f"Ping {src}-{dst} success")
        else:
            return (0, f"Ping {src}-{dst} failed : cannot reach {dst} from {src}")
    except Exception as e: return (0, f"Ping {src}-{dst} failed : {e}")
    
def getAddress(node, net):
    try:
        output = net[node].cmd("ip -6 addr")
        target_word = "global"
        previous_word = "inet6"
        words = output.split()
        target_index = words.index(target_word)
        for i in range(target_index - 1, -1, -1):
            if words[i] == previous_word:
                previous_index = i
                break
        substring = " ".join(words[previous_index+1:target_index])
        return substring.split("/")[0]
    except Exception as e: return -1

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)
        h3 = self.addHost("h3", defaultRoute=None)
        h4 = self.addHost("h4", defaultRoute=None)
        r1 = self.addRouter("r1", config=RouterConfig)
        r2 = self.addRouter("r2", config=RouterConfig)
        r3 = self.addRouter("r3", config=RouterConfig)
        r4 = self.addRouter("r4", config=RouterConfig)

        lh1r1 = self.addLink(h1, r1)
        lh2r2 = self.addLink(h2, r2)
        lh3r3 = self.addLink(h3, r3)
        lh4r4 = self.addLink(h4, r4)
        lr1r2 = self.addLink(r1, r2)
        lr2r3 = self.addLink(r2, r3)
        lr3r4 = self.addLink(r3, r4)
        lr1r4 = self.addLink(r1, r4)

        r1.addDaemon(STATIC, static_routes=[])
        r2.addDaemon(STATIC, static_routes=[])
        r3.addDaemon(STATIC, static_routes=[])
        r4.addDaemon(STATIC, static_routes=[])

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()

    IPCLI(net)
    ssh_student.ssh_student()

    grade = 0
    message = ""
    
    h1_addr = getAddress("h1", net)
    h2_addr = getAddress("h2", net)
    h3_addr = getAddress("h3", net)
    h4_addr = getAddress("h4", net)
    if h1_addr == -1: message += "h1 : invalid address\n"
    if h2_addr == -1: message += "h2 : invalid address\n"
    if h3_addr == -1: message += "h3 : invalid address\n"
    if h4_addr == -1: message += "h4 : invalid address\n"

    ping1 = testPing("h1", h2_addr, net)
    grade += ping1[0]
    message += ping1[1] + "\n"

    ping2 = testPing("h1", h3_addr, net)
    grade += ping2[0]
    message += ping2[1] + "\n"
    
    ping3 = testPing("h1", h4_addr, net)
    grade += ping3[0]
    message += ping3[1] + "\n"

    ping4 = testPing("h2", h1_addr, net)
    grade += ping4[0]
    message += ping4[1] + "\n"
    
    ping5 = testPing("h2", h3_addr, net)
    grade += ping5[0]
    message += ping5[1] + "\n"

    ping6 = testPing("h2", h4_addr, net)
    grade += ping6[0]
    message += ping6[1] + "\n"
    
    ping7 = testPing("h3", h1_addr, net)
    grade += ping7[0]
    message += ping7[1] + "\n"

    ping8 = testPing("h3", h2_addr, net)
    grade += ping8[0]
    message += ping8[1] + "\n"
    
    ping9 = testPing("h3", h4_addr, net)
    grade += ping9[0]
    message += ping9[1] + "\n"

    ping10 = testPing("h4", h1_addr, net)
    grade += ping10[0]
    message += ping10[1] + "\n"
    
    ping11 = testPing("h4", h2_addr, net)
    grade += ping11[0]
    message += ping11[1] + "\n"

    ping12 = testPing("h4", h3_addr, net)
    grade += ping12[0]
    message += ping12[1] + "\n"

    feedback.set_grade(grade)
    feedback.set_global_feedback(message)
    if grade == 100:
        feedback.set_global_result("success")
    else:
        feedback.set_global_result("failed")
    
except Exception as e:
    feedback.set_grade(0)
    feedback.set_global_feedback(f"{e}")
    feedback.set_global_result("failed")

finally:
    net.stop()