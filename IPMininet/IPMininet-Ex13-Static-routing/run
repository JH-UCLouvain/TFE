#!/bin/python3
# Author : Jeremy Holodiline

from inginious import feedback, ssh_student
from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig, STATIC
import random
import jc

addresses = dict()

def generateIPaddr(interface, version):
    while True:
        if version == "v4":
            addr = "192.168." + ".".join(("%s" % random.randint(0, 255) for _ in range(2)))
        elif version == "v6":
            addr = "2001:db8:1234:1341:" + ":".join(("%s" % "".join(("%s" % random.choice(("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f")) for _ in range(4))) for _ in range(4)))
        else:
            raise ValueError("IP version must be \"v4\" or \"v6\"")
        if addr not in addresses.values():
            addresses[interface] = addr
            return addr

def testPing(src, dst, net):
    try:
        resp = jc.parse('ping', net[src].cmd(f"ping -6 -c 1 -W 1 {dst}"))
        if resp["packet_loss_percent"] == 0.0 and len(resp["responses"]) > 0 and resp["responses"][0]["response_ip"] == dst:
            return (100/2, f"Ping {src}-{dst} success")
        else:
            return (0, f"Ping {src}-{dst} failed : cannot reach {dst} from {src}")
    except Exception as e: return (0, f"Ping {src}-{dst} failed : {e}")

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        h1 = self.addHost("h1", defaultRoute=None)
        h2 = self.addHost("h2", defaultRoute=None)
        r1 = self.addRouter("r1", config=RouterConfig)
        r2 = self.addRouter("r2", config=RouterConfig)
        r3 = self.addRouter("r3", config=RouterConfig)
        r4 = self.addRouter("r4", config=RouterConfig)
        r5 = self.addRouter("r5", config=RouterConfig)
        r6 = self.addRouter("r6", config=RouterConfig)

        lh1r1 = self.addLink(h1, r1)
        lh1r1[h1].addParams(ip=generateIPaddr("h1r1", "v6") + "/64")
        lh1r1[r1].addParams(ip=generateIPaddr("r1h1", "v6") + "/64")
        
        lr1r2 = self.addLink(r1, r2)
        lr1r2[r1].addParams(ip=generateIPaddr("r1r2", "v6") + "/64")
        lr1r2[r2].addParams(ip=generateIPaddr("r2r1", "v6") + "/64")
        
        lr2r3 = self.addLink(r2, r3)
        lr2r3[r2].addParams(ip=generateIPaddr("r2r3", "v6") + "/64")
        lr2r3[r3].addParams(ip=generateIPaddr("r3r2", "v6") + "/64")
        
        lr3r6 = self.addLink(r3, r6)
        lr3r6[r3].addParams(ip=generateIPaddr("r3r6", "v6") + "/64")
        lr3r6[r6].addParams(ip=generateIPaddr("r6r3", "v6") + "/64")
        
        lr1r4 = self.addLink(r1, r4)
        lr1r4[r1].addParams(ip=generateIPaddr("r1r4", "v6") + "/64")
        lr1r4[r4].addParams(ip=generateIPaddr("r4r1", "v6") + "/64")
        
        lr2r5 = self.addLink(r2, r5)
        lr2r5[r2].addParams(ip=generateIPaddr("r2r5", "v6") + "/64")
        lr2r5[r5].addParams(ip=generateIPaddr("r5r2", "v6") + "/64")
        
        lr4r5 = self.addLink(r4, r5)
        lr4r5[r4].addParams(ip=generateIPaddr("r4r5", "v6") + "/64")
        lr4r5[r5].addParams(ip=generateIPaddr("r5r4", "v6") + "/64")
        
        lr5r6 = self.addLink(r5, r6)
        lr5r6[r5].addParams(ip=generateIPaddr("r5r6", "v6") + "/64")
        lr5r6[r6].addParams(ip=generateIPaddr("r6r5", "v6") + "/64")
       
        lh2r6 = self.addLink(r6, h2)
        lh2r6[h2].addParams(ip=generateIPaddr("h2r6", "v6") + "/64")
        lh2r6[r6].addParams(ip=generateIPaddr("r6h2", "v6") + "/64")

        r1.addDaemon(STATIC, static_routes=[])
        r2.addDaemon(STATIC, static_routes=[])
        r3.addDaemon(STATIC, static_routes=[])
        r4.addDaemon(STATIC, static_routes=[])
        r5.addDaemon(STATIC, static_routes=[])
        r6.addDaemon(STATIC, static_routes=[])

        super(MyTopology, self).build(*args, **kwargs)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()
    net["h1"].cmd("ip -6 route add default via " + addresses["r1h1"])
    net["h2"].cmd("ip -6 route add default via " + addresses["r6h2"])
    net["r1"].cmd("ip -6 route add default via " + addresses["r4r1"])
    net["r2"].cmd("ip -6 route add default via " + addresses["r1r2"])
    net["r2"].cmd("ip -6 route add " + addresses["h1r1"] + "/64 via " + addresses["r3r2"])
    net["r3"].cmd("ip -6 route add default via " + addresses["r6r3"])
    net["r4"].cmd("ip -6 route add default via " + addresses["r5r4"])
    net["r5"].cmd("ip -6 route add default via " + addresses["r2r5"])
    net["r6"].cmd("ip -6 route add default via " + addresses["r5r6"])

    IPCLI(net)
    ssh_student.ssh_student()

    grade = 0
    message = ""

    ping1 = testPing("h1", addresses["h2r6"], net)
    grade += ping1[0]
    message += ping1[1] + "\n"

    ping2 = testPing("h2", addresses["h1r1"], net)
    grade += ping2[0]
    message += ping2[1] + "\n"

    feedback.set_grade(grade)
    feedback.set_global_feedback(message)
    if grade == 100:
        feedback.set_global_result("success")
    else:
        feedback.set_global_result("failed")
    
except Exception as e:
    feedback.set_grade(0)
    feedback.set_global_feedback(f"{e}")
    feedback.set_global_result("failed")

finally:
    net.stop()