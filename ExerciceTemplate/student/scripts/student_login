#!/bin/python3
# Author : Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
# TODO : Adding additional needed import from ipmininet

import random

def store_feedback(grade, result, feedback):
    # TODO : Setting the flag saying if we store the feedback for INGInious or if we just print it
    STORE = True
    if STORE:
        with open("tmp/student/feedback.txt", "w") as f:
            f.write(str(grade) + "\n")
            f.write(result + "\n")
            f.write(feedback)
    else:
        print(f"Grade : {grade}")
        print(f"Result : {result}")
        print(f"Feedback : {feedback}")

interface_addr = dict()

def generate_IP_addr(interface, version, prefix):
    while True:
        addr = ""
        if version == "v4":
            if prefix != "" and prefix[-1] != ".": prefix += "."
            n_rand = 4 - (len(prefix.split(".")) - 1)
            addr = prefix + ".".join(("%s" % random.randint(0, 255) for _ in range(n_rand)))
            addr = addr.rstrip(".")
        elif version == "v6":
            if prefix != "" and prefix[-1] != ":": prefix += ":"
            n_rand = 8 - (len(prefix.split(":")) - 1)
            for _ in range(n_rand):
                hex_num = ""
                for _ in range(4):
                    hex_num += random.choice(("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"))
                prefix += hex_num.lstrip("0") + ":"
            addr = prefix
            addr = addr.rstrip(":")
        else: raise ValueError("IP version must be \"v4\" or \"v6\"")
        if addr not in interface_addr.values():
            interface_addr[interface] = addr
            return addr
        
def get_address(node, version, interface_name, net):
    output = ""
    try:
        output = net[node].cmd(f"ip -{version} addr show dev {interface_name}")
    except Exception as e:
        raise ValueError(f"{node} ip -{version} addr show dev {interface_name} error : {e}")
    address = ""
    for line in output.splitlines():
        inet = "inet"
        if version == "6" : inet += "6"
        if inet in line and "scope global" in line:
            address = line.split()[1]
            break
    return address

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        # TODO : Adding instructions for the topology building

        super(MyTopology, self).build(*args, **kwargs)

class Test:

    def __init__(self):
        self.n_test = 0
        self.n_success_test = 0
        self.feedback = ""

    def ping_test(self, src_name, dst_interface_name, net):
        self.n_test += 1
        dst_address = interface_addr[dst_interface_name]
        dst_name = dst_interface_name.split("-")[0]
        dst_IP_version = "6" if ":" in dst_address else "4"
        output = ""
        try:
            output = net[src_name].cmd(f"ping -{dst_IP_version} -c 1 -W 1 {dst_address}")
        except Exception as e:
            self.feedback += f"Ping {src_name} -> {dst_name} error : {e}\n"
            return
        if " 0% packet loss" in output or " 0.0% packet loss" in output:
            self.n_success_test += 1
            self.feedback += f"Ping {src_name} -> {dst_name} success\n"
        else:
            self.feedback += f"Ping {src_name} -> {dst_name} failed : {output}\n"

    def traceroute_test(self, src_name, dst_interface_name, expected_route, net):
        self.n_test += 1
        dst_address = interface_addr[dst_interface_name]
        dst_name = dst_interface_name.split("-")[0]
        dst_IP_version = "6" if ":" in dst_address else "4"
        output = ""
        try:
            output = net[src_name].cmd(f"traceroute -{dst_IP_version} -q 1 {dst_address}")
        except Exception as e:
            self.feedback += f"Traceroute {src_name} -> {dst_name} error : {e}\n"
            return
        if "command not found" in output:
            self.feedback += f"Traceroute {src_name} -> {dst_name} error : {output}\n"
            return
        real_route = []
        lines_list = output.splitlines()[1:]
        for line in lines_list:
            real_route.append(line.split()[1])
        if lines_list[0].split()[0] != "1":
            self.feedback += f"Traceroute {src_name} -> {dst_name} failed : {output}\n"
        elif len(real_route) != len(expected_route):
            self.feedback += f"Traceroute {src_name} -> {dst_name} failed : expected route is {expected_route} but got {real_route}\n"
        else:
            for i in range(len(real_route)):
                if real_route[i] != expected_route[i]:
                    self.feedback += f"Traceroute {src_name} -> {dst_name} failed : expected route is {expected_route} but got {real_route}\n"
                    return
            self.n_success_test += 1
            self.feedback += f"Traceroute {src_name} -> {dst_name} success\n"

    def route_test(self, src_name, version, dst, way, must_be, net):
        self.n_test += 1
        output = ""
        try:
            output = net[src_name].cmd(f"ip -{version} route")
        except Exception as e:
            self.feedback += f"Ip route {src_name} error : {e}\n"
            return
        route = f"{dst} via {way}"
        route_is_there = True if route in output else False
        if route_is_there and must_be:
            self.n_success_test += 1
            self.feedback += f"Ip route {route} is in the {src_name} routing table : success\n"
        elif (not route_is_there) and must_be:
            self.feedback += f"Ip route {route} is not in the {src_name} routing table : failed : it must be added\n"
        elif route_is_there and (not must_be):
            self.feedback += f"Ip route {route} is in the {src_name} routing table : failed : it must be removed\n"
        elif (not route_is_there) and (not must_be):
            self.n_success_test += 1
            self.feedback += f"Ip route {route} is not in the {src_name} routing table : success\n"

    def send_feedback(self):
        grade = 100 if self.n_test == 0 else ((self.n_success_test / self.n_test) * 100)
        result = "success" if grade == 100 else "failed"
        store_feedback(grade, result, self.feedback)

# TODO : Adding a function for a custom command for the IPMininet client if needed
# def get_all_addresses(cli, args):
#     for interface, addr in interface_addr.items():
#         print(f"The IP address of interface {interface} is : {addr}/64")

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()

    # TODO : Binding the command function to the IPMininet custom command
    # IPCLI.do_getalladdresses = get_all_addresses

    # TODO : Adding instructions to configure the network before the student begins the exercice if needed
    # net["h1"].cmd(...)

    IPCLI(net)

    test = Test()

    # TODO : Adding network configuration tests if needed
    # test.ping_test(...)

    test.send_feedback()

except Exception as e:
    store_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()