#!/bin/python3
# Author : Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI
# TODO : Adding additional import from ipmininet if needed

import random

def store_feedback(grade, result, feedback):
    # TODO : Setting the flag saying if we store the feedback for INGInious or if we just print it
    STORE = True
    if STORE:
        with open("tmp/student/feedback.txt", "w") as f:
            f.write(str(grade) + "\n")
            f.write(result + "\n")
            f.write(feedback)
    else:
        print(f"Grade : {grade}")
        print(f"Result : {result}")
        print(f"Feedback : {feedback}")

# TODO : Adding utils functions if needed

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        # TODO : Adding instructions for the topology building

        super(MyTopology, self).build(*args, **kwargs)

class Test:

    def __init__(self):
        self.n_test = 0
        self.n_success_test = 0
        self.feedback = ""

    # TODO : Adding test methods if needed

    def send_feedback(self):
        grade = 100 if self.n_test == 0 else ((self.n_success_test / self.n_test) * 100)
        result = "success" if grade == 100 else "failed"
        store_feedback(grade, result, self.feedback)

# TODO : Adding a function for a custom command for the IPMininet client if needed
# def get_all_addresses(cli, args):
#     for interface, addr in interface_addr.items():
#         print(f"The IP address of interface {interface} is : {addr}/64")

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()

    # TODO : Binding the command function to the IPMininet custom command
    # IPCLI.do_getalladdresses = get_all_addresses

    # TODO : Adding instructions to configure the network before the student begins the exercice if needed
    # net["h1"].cmd(...)

    IPCLI(net)

    test = Test()

    # TODO : Adding network configuration tests if needed
    # test.ping_test(...)

    test.send_feedback()

except Exception as e:
    store_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()