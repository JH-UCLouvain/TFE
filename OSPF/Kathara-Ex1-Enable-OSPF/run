#!/bin/python3
# Jeremy Holodiline

from Kathara.manager.Kathara import Kathara
from Kathara.model.Lab import Lab
import os.path

lab = Lab("Exercice 1: Enable OSPF")

def store_feedback(grade, result, feedback):
    STORE = False
    if STORE:
        with open("tmp/student/feedback.txt", "w") as f:
            f.write(str(grade) + "\n")
            f.write(result + "\n")
            f.write(feedback)
    else:
        print(f"Grade : {grade}")
        print(f"Result : {result}")
        print(f"Feedback : {feedback}")

def exec_cmd(node, cmd, show_output=True):
    stream = Kathara.get_instance().exec(machine_name=node, command=cmd, lab_name=lab.name)
    output = ""
    for out, err in stream:
        if out != None:
            decoded_out = out.decode('utf-8')
            if show_output:
                print(decoded_out, end="")
            output += decoded_out
        else:
            decoded_err = err.decode('utf-8')
            if show_output:
                print(decoded_err, end="")
            output += decoded_err
    return output

class Test:

    def __init__(self):
        self.n_test = 0
        self.n_success_test = 0
        self.feedback = ""

    def output_test(self, node, cmd, expected, success_msg, failed_msg):
        self.n_test += 1
        output = exec_cmd(node, cmd, show_output=False)
        if expected in output:
            self.n_success_test += 1
            self.feedback += f"Success : {success_msg}\n"
        else:
            self.feedback += f"Failed : {failed_msg}\n"

    def send_feedback(self):
        grade = 100 if self.n_test == 0 else ((self.n_success_test / self.n_test) * 100)
        result = "success" if grade == 100 else "failed"
        store_feedback(grade, result, self.feedback)

try:
    r1 = lab.new_machine("r1", **{"image": "kathara/frr"})
    lab.connect_machine_to_link(r1.name, "A")
    r2 = lab.new_machine("r2", **{"image": "kathara/frr"})
    lab.connect_machine_to_link(r2.name, "A")

    lab.create_file_from_list(
        [
            "ip address add 10.0.0.1/24 dev eth0",
            "systemctl start frr"
        ],
        "r1.startup"
    )

    r1.create_file_from_path(os.path.join("assets", "r1-frr.conf"), "/etc/frr/frr.conf")
    r1.create_file_from_path(os.path.join("assets", "daemons"), "/etc/frr/daemons")
    r1.create_file_from_string(content="service integrated-vtysh-config\n", dst_path="/etc/frr/vtysh.conf")
    r1.update_file_from_string(content="hostname r1-frr\n", dst_path="/etc/frr/vtysh.conf")

    lab.create_file_from_list(
        [
            "ip address add 10.0.0.2/24 dev eth0",
            "systemctl start frr"
        ],
        "r2.startup"
    )

    r2.create_file_from_path(os.path.join("assets", "r2-frr.conf"), "/etc/frr/frr.conf")
    r2.create_file_from_path(os.path.join("assets", "daemons"), "/etc/frr/daemons")
    r2.create_file_from_string(content="service integrated-vtysh-config\n", dst_path="/etc/frr/vtysh.conf")
    r2.update_file_from_string(content="hostname r2-frr\n", dst_path="/etc/frr/vtysh.conf")

    Kathara.get_instance().deploy_lab(lab)

    while True:
        cmd = input(">>> ")
        if cmd.lower() == "exit":
            break
        cmd = cmd.split(" ", 1)
        exec_cmd(cmd[0], cmd[1])

    test = Test()
    test.output_test("r1", "vtysh -c \"show running-config\"", "router ospf", "r1: ospf enabled", "r1: ospf not enabled")
    test.output_test("r1", "vtysh -c \"show running-config\"", "network 10.0.0.0/16 area 0.0.0.0", "r1: correct network address and area", "r1: bad network address or area")
    test.output_test("r1", "vtysh -c \"show running-config\"", "redistribute connected", "r1: redistribution enabled", "r1: redistribution not enabled")
    test.output_test("r2", "vtysh -c \"show running-config\"", "router ospf", "r2: ospf enabled", "r2: ospf not enabled")
    test.output_test("r2", "vtysh -c \"show running-config\"", "network 10.0.0.0/16 area 0.0.0.0", "r2: correct network address and area", "r2: bad network address or area")
    test.output_test("r2", "vtysh -c \"show running-config\"", "redistribute connected", "r2: redistribution enabled", "r2: redistribution not enabled")
    test.send_feedback()

except Exception as e:
    store_feedback(0, "crash", f"Error from run script : {e}")

finally:
    Kathara.get_instance().undeploy_lab(lab_name=lab.name)

#r1 vtysh -c "configure terminal" -c "router ospf" -c "network 10.0.0.0/16 area 0.0.0.0" -c "redistribute connected"
#r2 vtysh -c "configure terminal" -c "router ospf" -c "network 10.0.0.0/16 area 0.0.0.0" -c "redistribute connected"