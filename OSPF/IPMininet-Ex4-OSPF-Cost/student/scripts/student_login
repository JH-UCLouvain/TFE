#!/bin/python3
# Author : Jeremy Holodiline

from ipmininet.iptopo import IPTopo
from ipmininet.ipnet import IPNet
from ipmininet.cli import IPCLI

import random

def store_feedback(grade, result, feedback):
    STORE = True
    if STORE:
        with open("tmp/student/feedback.txt", "w") as f:
            f.write(str(grade) + "\n")
            f.write(result + "\n")
            f.write(feedback)
    else:
        print(f"Grade : {grade}")
        print(f"Result : {result}")
        print(f"Feedback : {feedback}")

interface_addr = dict()

def generate_IP_addr(interface, version, prefix):
    while True:
        addr = ""
        if version == "v4":
            if prefix != "" and prefix[-1] != ".": prefix += "."
            n_rand = 4 - (len(prefix.split(".")) - 1)
            addr = prefix + ".".join(("%s" % random.randint(0, 255) for _ in range(n_rand)))
            addr = addr.rstrip(".")
        elif version == "v6":
            if prefix != "" and prefix[-1] != ":": prefix += ":"
            n_rand = 8 - (len(prefix.split(":")) - 1)
            addr = prefix + ":".join(("%s" % format(random.randint(0, 0xffff), "x") for _ in range(n_rand)))
            addr = addr.rstrip(":")
        else: raise ValueError("IP version must be \"v4\" or \"v6\"")
        if addr not in interface_addr.values():
            interface_addr[interface] = addr
            return addr

class MyTopology(IPTopo):

    def build(self, *args, **kwargs):

        r1 = self.addRouter("r1")
        r2 = self.addRouter("r2")
        r3 = self.addRouter("r3")
        r4 = self.addRouter("r4")
        r5 = self.addRouter("r5")
        r6 = self.addRouter("r6")

        prefix = ":".join(("%s" % format(random.randint(0, 0xffff), "x") for _ in range(3)))

        lr1r2 = self.addLink(r1, r2, intfName1=f"r1-eth{random.randint(0, 25)}", intfName2=f"r2-eth{random.randint(0, 10)}")
        lr1r2[r1].addParams(ip = generate_IP_addr("r1-r2", "v6", f"{prefix}:1:") + "/64")
        lr1r2[r2].addParams(ip = generate_IP_addr("r2-r1", "v6", f"{prefix}:1:") + "/64")

        lr2r3 = self.addLink(r2, r3, intfName1=f"r2-eth{random.randint(11, 20)}", intfName2=f"r3-eth{random.randint(0, 25)}")
        lr2r3[r2].addParams(ip = generate_IP_addr("r2-r3", "v6", f"{prefix}:2:") + "/64")
        lr2r3[r3].addParams(ip = generate_IP_addr("r3-r2", "v6", f"{prefix}:2:") + "/64")

        lr4r5 = self.addLink(r4, r5, intfName1=f"r4-eth{random.randint(0, 25)}", intfName2=f"r5-eth{random.randint(0, 10)}")
        lr4r5[r4].addParams(ip = generate_IP_addr("r4-r5", "v6", f"{prefix}:3:") + "/64")
        lr4r5[r5].addParams(ip = generate_IP_addr("r5-r4", "v6", f"{prefix}:3:") + "/64")

        lr5r6 = self.addLink(r5, r6, intfName1=f"r5-eth{random.randint(11, 20)}", intfName2=f"r6-eth{random.randint(0, 25)}")
        lr5r6[r5].addParams(ip = generate_IP_addr("r5-r6", "v6", f"{prefix}:4:") + "/64")
        lr5r6[r6].addParams(ip = generate_IP_addr("r6-r5", "v6", f"{prefix}:4:") + "/64")

        lr1r4 = self.addLink(r1, r4, intfName1=f"r1-eth{random.randint(26, 50)}", intfName2=f"r4-eth{random.randint(26, 50)}")
        lr1r4[r1].addParams(ip = generate_IP_addr("r1-r4", "v6", f"{prefix}:5:") + "/64")
        lr1r4[r4].addParams(ip = generate_IP_addr("r4-r1", "v6", f"{prefix}:5:") + "/64")

        lr2r5 = self.addLink(r2, r5, intfName1=f"r2-eth{random.randint(21, 30)}", intfName2=f"r5-eth{random.randint(21, 30)}")
        lr2r5[r2].addParams(ip = generate_IP_addr("r2-r5", "v6", f"{prefix}:6:") + "/64")
        lr2r5[r5].addParams(ip = generate_IP_addr("r5-r2", "v6", f"{prefix}:6:") + "/64")

        lr3r6 = self.addLink(r3, r6, intfName1=f"r3-eth{random.randint(26, 50)}", intfName2=f"r6-eth{random.randint(26, 50)}")
        lr3r6[r3].addParams(ip = generate_IP_addr("r3-r6", "v6", f"{prefix}:7:") + "/64")
        lr3r6[r6].addParams(ip = generate_IP_addr("r6-r3", "v6", f"{prefix}:7:") + "/64")

        super(MyTopology, self).build(*args, **kwargs)

class Test:

    def __init__(self):
        self.n_test = 0
        self.n_success_test = 0
        self.feedback = ""
    
    def traceroute_test(self, src_name, dst_interface_name, expected_route, net):
        self.n_test += 1
        dst_address = interface_addr[dst_interface_name]
        dst_name = dst_interface_name.split("-")[0]
        dst_IP_version = "6" if ":" in dst_address else "4"
        output = ""
        try:
            output = net[src_name].cmd(f"traceroute -{dst_IP_version} -q 1 {dst_address}")
        except Exception as e:
            self.feedback += f"Traceroute {src_name} -> {dst_name} error : {e}\n"
            return
        if "command not found" in output:
            self.feedback += f"Traceroute {src_name} -> {dst_name} error : {output}\n"
            return
        real_route = []
        lines_list = output.splitlines()[1:]
        for line in lines_list:
            real_route.append(line.split()[1])
        if lines_list[0].split()[0] != "1":
            self.feedback += f"Traceroute {src_name} -> {dst_name} failed : {output}\n"
        elif len(real_route) != len(expected_route):
            self.feedback += f"Traceroute {src_name} -> {dst_name} failed : expected route is {expected_route} but got {real_route}\n"
        else:
            for i in range(len(real_route)):
                if real_route[i] != expected_route[i]:
                    self.feedback += f"Traceroute {src_name} -> {dst_name} failed : expected route is {expected_route} but got {real_route}\n"
                    return
            self.n_success_test += 1
            self.feedback += f"Traceroute {src_name} -> {dst_name} success\n"

    def send_feedback(self):
        grade = 100 if self.n_test == 0 else ((self.n_success_test / self.n_test) * 100)
        result = "success" if grade == 100 else "failed"
        store_feedback(grade, result, self.feedback)

net = IPNet(topo=MyTopology(), allocate_IPs=False)

try:
    net.start()

    IPCLI(net)

    test = Test()
    test.traceroute_test("r1", "r6-r3", ["r4", "r5", "r2", "r3", "r6"], net)
    test.send_feedback()

except Exception as e:
    store_feedback(0, "crash", f"Error from the ipmininet script : {e}")

finally:
    net.stop()